name: cross-build using qemu

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

jobs:
  build:
    runs-on: oracle-vm-16cpu-64gb-x86-64
    strategy:
      matrix:
        ubuntu: ['noble']
        arch: ['arm64']
    steps:
      - uses: actions/checkout@v4
      - name: Clean disk space
        uses: ./.github/actions/clean-runner
      - name: Install qemu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-utils cloud-image-utils wget
      - name: Provision qemu vm
        run: |
          wget https://cloud-images.ubuntu.com/${{ matrix.ubuntu }}/current/${{ matrix.ubuntu }}-server-cloudimg-${{ matrix.arch }}.img

          cat >"user-data" << EOF
          #cloud-config
          password: passw0rd
          chpasswd: { expire: False }
          ssh_pwauth: True
          EOF
          cloud-localds user-data.img user-data

          cp /usr/share/AAVMF/AAVMF_CODE.fd .
          cp /usr/share/AAVMF/AAVMF_VARS.fd .

          qemu-system-aarch64 \
            -m 2048 \
            -cpu max -smp 4 \
            -machine virt,gic-version=max \
            -display none \
            -drive if=pflash,format=raw,readonly=on,file=AAVMF_CODE.fd \
            -drive if=pflash,format=raw,file=AAVMF_VARS.fd \
            -drive if=none,file=${{ matrix.ubuntu }}-server-cloudimg-${{ matrix.arch }}.img,id=hd0,cache=unsafe \
            -device virtio-blk-device,drive=hd0 \
            -drive file=user-data.img,format=raw,media=cdrom,if=none,id=cd0 \
            -device virtio-blk-device,drive=cd0 \
            -netdev type=user,id=net0,hostfwd=tcp::22225-:22 \
            -device virtio-net-device,netdev=net0 \
            -virtfs local,path=$GITHUB_WORKSPACE,mount_tag=host_share,security_model=passthrough,id=host_share_fs \
            -daemonize
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
      - name: Check ssh connectivity
        run: |
          set +e
          while true; do
            echo Trying to connect
            sshpass -p passw0rd ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22225 ubuntu@localhost whoami
            if [ $? -eq 0 ]; then
              break
            fi
            ps -axf | grep qemu
            netstat -tnlp
            sudo dmesg
            echo "intel"
            cat /sys/module/kvm_intel/parameters/nested
            echo "amd"
            cat /sys/module/kvm_amd/parameters/nested
            sleep 10
          done
      - name: Setup passthrough fs mount
        run: |
          set +e
          sshpass -p passw0rd ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22225 ubuntu@localhost \
            sudo mkdir /mnt/host_share
          sshpass -p passw0rd ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22225 ubuntu@localhost \
            sudo mount -t 9p -o trans=virtio,version=9p2000.L host_share /mnt/host_share
      - name: Set up golang
        run: |
          sshpass -p passw0rd ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22225 ubuntu@localhost \
            'sudo apt-get update && sudo apt-get install -y golang'
      - name: install dependencies
        run: |
          sshpass -p passw0rd ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22225 ubuntu@localhost \
            'cd /mnt/host_share && sudo ./install-build-deps.sh'
      - name: Build-level1
        run: |
          sshpass -p passw0rd ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22225 ubuntu@localhost \
            make show-info
          sshpass -p passw0rd ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22225 ubuntu@localhost \
            'cd /mnt/host_share && make stacker-dynamic VERSION_FULL=${{ inputs.build-id }}'
      - name: Build
        run: |
          sshpass -p passw0rd ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22225 ubuntu@localhost \
            'cd /mnt/host_share && make stacker VERSION_FULL=${{ github.sha }}'
      - name: Check binary
        run: |
          cd $GITHUB_WORKSPACE
      - if: github.event_name == 'release' && github.event.action == 'published'
        name: Publish artifacts on releases
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: stacker
          asset_name: stacker-${{ matrix.arch }}
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
