name: "convert dockerfiles"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  REGISTRY_URL: localhost:5000

jobs:
  convert:
    name: "convert"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: stacker
          key: ${{ github.sha }}
      - name: zot registry
        env:
          ZOT_HOST: localhost
          ZOT_PORT: 5000
        run: |
          # start a zot instance (minimal)
          podman run -d -p ${ZOT_PORT}:${ZOT_PORT} ghcr.io/project-zot/zot-minimal-linux-amd64:latest
          # check if reachable
          while true; do x=0; curl -f http://${REGISTRY_URL}/v2/ || x=1; if [ $x -eq 0 ]; then break; fi; sleep 1; done
      - name: alpine
        run: |
          export PATH=$PATH:$GITHUB_WORKSPACE
          git clone https://github.com/alpinelinux/docker-alpine.git
          chmod -R a+rwx docker-alpine
          cd docker-alpine
          TEMPDIR=$(mktemp -d)
          stacker convert --docker-file Dockerfile --output-file stacker.yaml --substitute-file stacker-subs.yaml
          stacker build -f stacker.yaml --substitute-file stacker-subs.yaml --substitute IMAGE=alpine --substitute STACKER_VOL1="$TEMPDIR"
          stacker publish -f stacker.yaml --substitute-file stacker-subs.yaml --substitute IMAGE=alpine --substitute STACKER_VOL1="$TEMPDIR" --skip-tls --url docker://${REGISTRY_URL} --layer alpine --tag latest
          rm -f stacker.yaml stacker-subs.yaml
          stacker clean
          cd $GITHUB_WORKSPACE
          rm -rf docker-alpine
      - name: elasticsearch
        run: |
          export PATH=$PATH:$GITHUB_WORKSPACE
          git clone https://github.com/elastic/dockerfiles.git
          chmod -R a+rwx dockerfiles
          cd dockerfiles/elasticsearch
          stacker convert --docker-file Dockerfile --output-file stacker.yaml --substitute-file stacker-subs.yaml
          stacker build -f stacker.yaml --substitute-file stacker-subs.yaml --substitute IMAGE=elasticsearch
          stacker publish -f stacker.yaml --substitute-file stacker-subs.yaml --substitute IMAGE=elasticsearch --skip-tls --url docker://${REGISTRY_URL} --layer elasticsearch --tag latest
          rm -f stacker.yaml stacker-subs.yaml
          stacker clean
          cd $GITHUB_WORKSPACE
          rm -rf dockerfiles
      - name: python
        run: |
          export PATH=$PATH:$GITHUB_WORKSPACE
          git clone https://github.com/docker-library/python.git
          cd python/3.11/alpine3.17
          chmod -R a+rw .
          stacker convert --docker-file Dockerfile --output-file stacker.yaml --substitute-file stacker-subs.yaml
          stacker build -f stacker.yaml --substitute-file stacker-subs.yaml --substitute IMAGE=python
          stacker publish -f stacker.yaml --substitute-file stacker-subs.yaml --substitute IMAGE=python --skip-tls --url docker://${REGISTRY_URL} --layer python --tag latest
          rm -f stacker.yaml stacker-subs.yaml
          stacker clean
          cd $GITHUB_WORKSPACE
          rm -rf python
