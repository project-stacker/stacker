name: Reusable stacker build
on:
  workflow_call:
    inputs:
      # note >-, args needs to be strings to be used as inputs
      # for the reusable build.yaml workflow
      go-version:
        required: false
        type: string
        description: 'Stringified JSON object listing go versions'
        default: >-
          ["1.20.x"]
      privilege-level:
        required: false
        type: string
        description: 'Stringified JSON object listing stacker privilege-level'
        default: >-
          ["unpriv", "priv"]
      build-id:
        required: false
        type: string
        description: 'build-id'
        default: "${{ github.sha }}"
      slow-test:
        required: false
        type: boolean
        description: 'Should slow tests be run?'
        default: true

jobs:
  build:
    runs-on: ubuntu-22.04
    services:
      registry:
        image: ghcr.io/project-stacker/registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        go-version: ${{fromJson(inputs.go-version)}}
        privilege-level: ${{fromJson(inputs.privilege-level)}}
    name: "golang ${{ matrix.go-version }} privilege ${{ matrix.privilege-level }}"
    steps:
      - uses: actions/checkout@v3
      - name: Clean disk space
        uses: ./.github/actions/clean-runner
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
      - name: Set up golang ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Setup Environment
        run: |
          gopath=$PWD/.build/gopath
          echo "GOPATH=$gopath" >> $GITHUB_ENV
          echo "GOCACHE=$gopath/gocache" >> $GITHUB_ENV
          echo "PATH=$gopath/bin:$PATH" >> $GITHUB_ENV
          echo "SLOW_TEST=${{inputs.slow-test}}" >> $GITHUB_ENV
          echo "STACKER_DOCKER_BASE=oci:$PWD/.build/oci-clone:" >> $GITHUB_ENV

          echo "PWD=$PWD"
          cat "$GITHUB_ENV"
      - name: install dependencies
        run: |
          ./install-build-deps.sh
          echo "running kernel is: $(uname -a)"
      - name: docker-clone
        run: |
          make docker-clone "STACKER_DOCKER_BASE=docker://" CLONE_D="$PWD/.build/oci-clone"
      - name: Go-download
        run: |
          make go-download
      - name: Show disk usage before building the binaries
        uses: ./.github/actions/show-disk-usage
      - name: Build-level1
        run: |
          make show-info
          make stacker-dynamic VERSION_FULL=${{ inputs.build-id }}
      - name: Build
        run: |
          make stacker VERSION_FULL=${{ inputs.build-id }}
        env:
          REGISTRY_URL: localhost:5000
          ZOT_HOST: localhost
          ZOT_PORT: 8080
      - name: Show disk usage before running the tests
        if: always()
        uses: ./.github/actions/show-disk-usage
      - name: Test
        run: |
          make check VERSION_FULL=${{ inputs.build-id }} PRIVILEGE_LEVEL=${{ matrix.privilege-level }}
        env:
          REGISTRY_URL: localhost:5000
          ZOT_HOST: localhost
          ZOT_PORT: 8080
      - name: Show disk usage after running the tests
        if: always()
        uses: ./.github/actions/show-disk-usage
      - name: Upload code coverage
        uses: codecov/codecov-action@v3
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: stacker
          key: ${{ inputs.build-id }}
  build-arch:
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        go-version: ${{fromJson(inputs.go-version)}}
        privilege-level: ${{fromJson(inputs.privilege-level)}}
        arch: ["arm64"]
    name: "golang ${{ matrix.go-version }} privilege ${{ matrix.privilege-level }} arch ${{ matrix.arch }}"
    steps:
      - uses: actions/checkout@v3
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
      - name: Setup Environment
        run: |
          gopath=$PWD/.build/gopath
          echo "GOPATH=$gopath" >> $GITHUB_ENV
          echo "GOCACHE=$gopath/gocache" >> $GITHUB_ENV
          echo "PATH=$gopath/bin:$PATH" >> $GITHUB_ENV
          echo "SLOW_TEST=${{inputs.slow-test}}" >> $GITHUB_ENV
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "QEMU_ARCH=aarch64" >> $GITHUB_ENV
            echo "BASE_IMAGE=docker://arm64v8/alpine:edge" >> $GITHUB_ENV
          fi

          echo "PWD=$PWD"
          cat "$GITHUB_ENV"
      - uses: uraimo/run-on-arch-action@v2
        name: Build for ${{ matrix.arch }}
        id: runcmd
        with:
          arch: ${{ env.QEMU_ARCH }}
          distro: ubuntu22.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          dockerRunArgs: -v $GITHUB_WORKSPACE:/src

          # Set an output parameter `uname` for use in subsequent steps
          run: |
            uname -a
            echo ::set-output name=uname::$(uname -a)
            # setup golang
            apt-get update
            apt-get install -yy wget curl tar software-properties-common git pkgconf build-essential
            cd /tmp
            wget -N https://go.dev/dl/go1.20.8.linux-${{ matrix.arch }}.tar.gz
            rm -rf /usr/local/go && tar -C /usr/local -xzf go1.20.8.linux-${{ matrix.arch }}.tar.gz
            export PATH=$PATH:/usr/local/go/bin
            # install dependencies
            export GOPATH=/src
            add-apt-repository -y ppa:project-machine/squashfuse
            apt-get update
            apt-get install -yy lxc-utils lxc-dev libacl1-dev jq libcap-dev libseccomp-dev libpam-dev bats parallel libzstd-dev sudo
            GO111MODULE=off go get github.com/opencontainers/umoci/cmd/umoci
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
            apt-get install -yy autoconf automake make autogen autoconf libtool binutils git squashfs-tools libcryptsetup-dev libdevmapper-dev cryptsetup-bin squashfuse
            echo WHOAMI=$(whoami)

            # add a non-root user "stacker"
            adduser --disabled-login --no-create-home --gecos "stacker" stacker

            mkdir /src-copy
            cp -R /src/* /src-copy/
            chown -R stacker:stacker /src-copy

            # execute this as "stacker" user
            sudo -i -u stacker bash << EOF
            echo WHOAMI=$(whoami)
            export PATH=$PATH:/usr/local/go/bin
            cd /src-copy
            make go-download
            make show-info
            make stacker-dynamic VERSION_FULL=${{ inputs.build-id }}
            export QEMU_STRACE=1
            make stacker STACKER_REAL_UID=0 VERSION_FULL=${{ inputs.build-id }} STACKER_BUILD_BASE_IMAGE=${{ env.BASE_IMAGE }}
            EOF
      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"

