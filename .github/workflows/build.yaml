name: Reusable stacker build
on:
  workflow_call:
    inputs:
      # note >-, args needs to be strings to be used as inputs
      # for the reusable build.yaml workflow
      go-version:
        required: false
        type: string
        description: 'Stringified JSON object listing go versions'
        default: >-
          ["1.20.x"]
      privilege-level:
        required: false
        type: string
        description: 'Stringified JSON object listing stacker privilege-level'
        default: >-
          ["unpriv", "priv"]
      build-id:
        required: false
        type: string
        description: 'build-id'
        default: "${{ github.sha }}"
      slow-test:
        required: false
        type: boolean
        description: 'Should slow tests be run?'
        default: true

jobs:
  build:
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        go-version: ${{fromJson(inputs.go-version)}}
        privilege-level: ${{fromJson(inputs.privilege-level)}}
    name: "golang ${{ matrix.go-version }} privilege ${{ matrix.privilege-level }}"
    steps:
      - uses: actions/checkout@v3
      - name: Clean disk space
        uses: ./.github/actions/clean-runner
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
      - name: Set up golang ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Setup Environment
        run: |
          gopath=$PWD/.build/gopath
          echo "GOPATH=$gopath" >> $GITHUB_ENV
          echo "GOCACHE=$gopath/gocache" >> $GITHUB_ENV
          echo "PATH=$gopath/bin:$PATH" >> $GITHUB_ENV
          echo "SLOW_TEST=${{inputs.slow-test}}" >> $GITHUB_ENV

          echo "PWD=$PWD"
          cat "$GITHUB_ENV"
      - name: install dependencies
        run: |
          sudo add-apt-repository -y ppa:project-machine/squashfuse
          sudo apt-get update
          sudo apt-get install -yy lxc-utils lxc-dev libacl1-dev jq libcap-dev libseccomp-dev libpam-dev bats parallel libzstd-dev
          sudo apt-get install -yy autoconf automake make autogen autoconf libtool binutils git squashfs-tools libcryptsetup-dev libdevmapper-dev cryptsetup-bin squashfuse
          GO111MODULE=off go get github.com/opencontainers/umoci/cmd/umoci
          make download-tools
          echo "running kernel is: $(uname -a)"
      - name: Go-download
        run: |
          make go-download
      - name: Show disk usage before building the binaries
        uses: ./.github/actions/show-disk-usage
      - name: Build-level1
        run: |
          make show-info
          make stacker-dynamic VERSION_FULL=${{ inputs.build-id }}
      - name: Build
        run: |
          make stacker VERSION_FULL=${{ inputs.build-id }}
        env:
          REGISTRY_URL: localhost:5000
          ZOT_HOST: localhost
          ZOT_PORT: 8080
      - name: Show disk usage before running the tests
        if: always()
        uses: ./.github/actions/show-disk-usage
      - name: Test
        run: |
          make check VERSION_FULL=${{ inputs.build-id }} PRIVILEGE_LEVEL=${{ matrix.privilege-level }}
        env:
          REGISTRY_URL: localhost:5000
          ZOT_HOST: localhost
          ZOT_PORT: 8080
      - name: Show disk usage after running the tests
        if: always()
        uses: ./.github/actions/show-disk-usage
      - name: Upload code coverage
        uses: codecov/codecov-action@v3
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: stacker
          key: ${{ inputs.build-id }}
  build-arch:
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        go-version: ${{fromJson(inputs.go-version)}}
        privilege-level: ${{fromJson(inputs.privilege-level)}}
        build-id: ${{fromJson(inputs.build-id)}}
    name: "golang ${{ matrix.go-version }} privilege ${{ matrix.privilege-level }}"
    steps:
      - uses: actions/checkout@v3
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
      - name: Setup qemu-arm
        run: |
          sudo apt-get update
          sudo apt-get install cloud-image-utils qemu-system-arm qemu-efi wget
          cat >user-data <<EOF
          #cloud-config
          password: asdfqwer
          chpasswd: { expire: False }
          ssh_pwauth: True
          runcmd:
            - systemctl start ssh
            - systemctl status ssh
          EOF
          ls -al
          cat user-data
          cloud-localds user-data.img user-data
          wget -N http://cloud-images.ubuntu.com/mantic/current/mantic-server-cloudimg-arm64.img
          sudo qemu-system-aarch64 -m 1024 -cpu cortex-a57 -M virt -display none -daemonize \
            -drive file=/usr/share/AAVMF/AAVMF_CODE.fd,format=raw,if=pflash \
            -drive if=none,file=mantic-server-cloudimg-arm64.img,id=hd0 \
            -drive file=user-data.img,format=raw \
            -device virtio-blk-device,drive=hd0 \
            -nic user,id=eth0,hostfwd=::10022-:22
          # wait for a while
          sleep 1800
          # check port
          netstat -plant | grep :10022
      - name: ls -a via ssh
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd /tmp
            ls -a
          host: localhost
          port: 10022
          user: ubuntu
          pass: asdfqwer
          args: -tt -o StrictHostKeyChecking=no
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: localhost
          username: ubuntu
          password: asdfqwer
          port: 10022
          script: |
            whoami
          proxy_port:
